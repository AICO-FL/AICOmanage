// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemUser {
  id         String   @id @default(uuid())
  username   String   @unique
  password   String
  email      String
  chatworkId String?
  updatedAt  DateTime @updatedAt

  @@map("system_users")
}

model User {
  id         String    @id @default(uuid())
  username   String    @unique
  password   String
  firstName  String
  lastName   String
  email      String
  chatworkId String?
  actions    Action[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("users")
}

model Terminal {
  id              String         @id @default(uuid())
  aicoId          String        @unique
  name            String
  status          TerminalStatus @default(OFFLINE)
  greeting        String?
  offlineCount    Int           @default(0)
  downtimeMinutes Int           @default(0)
  lastPolling     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  conversations   Conversation[]
  actions         Action[]
  errorLogs       ErrorLog[]

  @@map("terminals")
}

model Conversation {
  id         String      @id @default(uuid())
  messageId  String
  terminal   Terminal    @relation(fields: [terminalId], references: [id], onDelete: Cascade)
  terminalId String
  speaker    Speaker
  message    String      @db.Text
  createdAt  DateTime    @default(now())
  clientFile ClientFile?

  @@map("conversations")
}

model ClientFile {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String       @unique
  path           String
  mimeType       String
  size           Int
  createdAt      DateTime     @default(now())

  @@map("client_files")
}

model ServerFile {
  id        String    @id @default(uuid())
  fileNo    Int       @default(autoincrement())
  name      String
  mimeType  String
  size      Int
  path      String
  url       String
  createdAt DateTime  @default(now())
  actions   Action[]

  @@map("server_files")
}

model Action {
  id          String     @id @default(uuid())
  name        String
  terminal    Terminal   @relation(fields: [terminalId], references: [id], onDelete: Cascade)
  terminalId  String
  description String?
  keywords    String     @db.Text
  condition   Condition
  type        ActionType
  mediaFile   ServerFile? @relation(fields: [mediaId], references: [id])
  mediaId     String?
  template    Template?  @relation(fields: [templateId], references: [id])
  templateId  String?
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("actions")
}

model Template {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(100)
  content   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  actions   Action[]

  @@map("templates")
}

model ErrorLog {
  id         String    @id @default(uuid())
  terminal   Terminal  @relation(fields: [terminalId], references: [id], onDelete: Cascade)
  terminalId String
  type       ErrorType
  message    String    @db.Text
  createdAt  DateTime  @default(now())

  @@map("error_logs")
}

enum TerminalStatus {
  ONLINE
  OFFLINE
}

enum Speaker {
  USER
  AICO
}

enum Condition {
  AND
  OR
}

enum ActionType {
  MEDIA
  CHATWORK
  EMAIL
}

enum ErrorType {
  OFFLINE
  SYSTEM
  APPLICATION
}